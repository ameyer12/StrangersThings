{"ast":null,"code":"const baseURL = 'https://strangers-things.herokuapp.com/api/2206-FTB-ET-WEB-PT';\nexport const getPosts = async token => {\n  try {\n    const response = await fetch(`${baseURL}/posts`, {\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    const results = response.json();\n    return results;\n  } catch (error) {\n    console.log(\"error getting all posts\");\n  }\n};\nexport const registerUser = async (username, password) => {\n  try {\n    const response = await fetch(`${baseURL}/users/register`, {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        user: {\n          username: username,\n          password: password\n        }\n      })\n    });\n    const results = response.json();\n    return results;\n  } catch (error) {\n    console.log('error registering user');\n  }\n};\nexport const loginUser = async (username, password) => {\n  try {\n    const response = await fetch(`${baseURL}/users/login`, {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        user: {\n          username: username,\n          password: password\n        }\n      })\n    });\n    const results = response.json();\n    return results;\n  } catch (error) {\n    console.log(\"error logging in\");\n  }\n};\nexport const getUserDetails = async (token, title, description, price, willDeliver) => {\n  try {\n    const response = await fetch(`${baseURL}/users/me`, {\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      },\n      body: JSON.stringify({\n        post: {\n          title: title,\n          description: description,\n          price: price,\n          willDeli\n        }\n      })\n    });\n    const results = response.json();\n    return results;\n  } catch (error) {\n    console.log('this is an error message');\n  }\n};\nexport const createPost = async token => {\n  try {\n    const response = await fetch(`${baseURL}/posts`, {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    const results = response.json();\n    console.log(results);\n    return results;\n  } catch (error) {\n    console.log('this is an error message');\n  }\n};","map":{"version":3,"names":["baseURL","getPosts","token","response","fetch","headers","results","json","error","console","log","registerUser","username","password","method","body","JSON","stringify","user","loginUser","getUserDetails","title","description","price","willDeliver","post","willDeli","createPost"],"sources":["/Users/AustinTheGOAT/Desktop/Fullstack-Academy/React-Strangers-Things-08302022/src/api/index.js"],"sourcesContent":["const baseURL = 'https://strangers-things.herokuapp.com/api/2206-FTB-ET-WEB-PT'\n\nexport const getPosts = async (token) => {\n    try {\n      const response = await fetch(`${baseURL}/posts`, {\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${token}`\n          }\n      });\n      const results = response.json();\n      return(results);\n    } catch (error) {\n        console.log(\"error getting all posts\")\n    }\n}\n\nexport const registerUser = async(username, password) => {\n  try {\n    const response = await fetch(`${baseURL}/users/register`, {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        user: {\n          username: username,\n          password: password\n        }\n      })\n    })\n    const results = response.json();\n    return results;\n  } catch (error) {\n    console.log('error registering user')\n  }\n}\n\n\nexport const loginUser = async(username, password) => {\n  try {\n    const response = await fetch(`${baseURL}/users/login`, {\n  method: \"POST\",\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({\n    user: {\n      username: username,\n      password: password\n    }\n  }\n  )}\n  )\n  const results = response.json();\n  return results;\n  } catch (error) {\n    console.log(\"error logging in\")\n  }\n}\n\n\nexport const getUserDetails = async (token, title, description, price, willDeliver) => {\n  try {\n    const response = await fetch(`${baseURL}/users/me`, {\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      },\n      body: JSON.stringify({\n        post: {\n\n          title: title,\n          description: description,\n          price: price, \n          willDeli\n        }\n      })\n    })\n    const results = response.json()\n    return results;\n  } catch (error) {\n    console.log('this is an error message')\n  }\n}\n\nexport const createPost = async (token) => {\n  try {\n    const response = await fetch(`${baseURL}/posts`, { \n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      },\n    })\n    const results = response.json()\n    console.log(results)\n    return results;\n  } catch (error) {\n    console.log('this is an error message')\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}